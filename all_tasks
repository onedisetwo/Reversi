#include <iostream>
#include <vector>
#include <string>
#define debug; cin>>debugx;

/*первая коорд. - буква, вторая цифра. т.е.
5 - - - - -
4 - - - - -
3 - - - - -
2 - - - - -
1 - - - - -
- A B C D E
*/

using namespace std;

bool debugx;

class board{
public:
    vector<vector<short> > board;
    void start(){ //Изменение размера и заполнение до стартовой позиции
        board.resize(9);
        for(int i=0;i<9;i++){
            board[i].resize(9);
        }
        for(int i=0;i<9;i++){
            for(int k=0;k<9;k++){
                board[i][k]=0;
                if(i==4 & k==4 || i==5 & k==5){
                    board[i][k]=1;
                }
                if(i==5 & k==4 || i==4 & k==5){
                    board[i][k]=2;
                }
            }
        }
    }
    void input(){ //Ввод доски
        for(int i=1;i<9;i++){
            string s;
            cin>>s;
            for(int k=1;k<9;k++){
                board[k][9-i]=(int)(s[k-1])-48;
            }
        }
    }
    void print(){ //Напечатать доску
        cout<<endl;
        for(int i=1;i<9;i++){
            for(int k=1;k<9;k++){
                cout<<board[k][9-i];
            }
            cout<<endl;
        }
    }
    vector<short> wincheck_3(){ //Проверка выигрыша: победитель, кол-во черных, кол-во белых
        vector<short> v(3,0);
        for(int i=1;i<9;i++){
            for(int k=1;k<9;k++){
                v[board[i][k]]++;
            }
        }
        if(v[1]>v[2])
            v[0]=1;
        if(v[2]>v[1])
            v[0]=2;
        if(v[1]==v[2])
            v[0]=0;
        return v;
    }
    short wincheck_p(){ //Проверка выигрыщша: победитель
        return wincheck_3()[0];
    }
};

board b1,b2;

class coord{
    public:
    short x,y;
    void input(){
        string s;
        cin>>s;
        x=(int)(s[0])-64;
        y=(int)(s[1])-48;
    }
    void move_make(short player){
        b1.board[x][y]=player;
    }
    void move_undo(){
        b1.board[x][y]=0;
    }
    void set(short a, short b){
        x=a;
        y=b;
    }
};

string ch_s(coord a){
    string s="00";
    s[0]=(char)(a.x+64);
    s[1]=(char)(a.y+48);
    return s;
}

short difplayer(short player){ //Смена игрока
    if(player==1)
        return 2;
    else
        return 1;
}

vector<bool> vec_move_possibility(short y, short x,short player){ //Возможность хода в клетку и в какой стороне он окажет влияние
    vector<bool> v(8,0);
    if(b1.board[y][x]!=0)
        return v;
    if(y>0 && x>0)
    if(v[0]==0 && b1.board[y-1][x-1]==difplayer(player)){
        for(int i=2;y-i>0 && x-i>0;i++){
            if(b1.board[y-i][x-i]==0){
                break;
            }
            if(b1.board[y-i][x-i]==player){
                v[0]=1;
                break;
            }
        }
    }
    if(y>0)
    if(v[1]==0 && b1.board[y-1][x]==difplayer(player)){
        for(int i=2;y-i>0;i++){
            if(b1.board[y-i][x]==0){
                break;
            }
            if(b1.board[y-i][x]==player){
                v[1]=1;
                break;
            }
        }
    }
    if(y>0 && x<8)
    if(v[2]==0 && b1.board[y-1][x+1]==difplayer(player)){
        for(int i=2;y-i>0 && x+i<8;i++){
            if(b1.board[y-i][x+i]==0){
                break;
            }
            if(b1.board[y-i][x+i]==player){
                v[2]=1;
                break;
            }
        }
    }
    if(x<8)
    if(v[3]==0 && b1.board[y][x+1]==difplayer(player)){
        for(int i=2;x+i<8;i++){
            if(b1.board[y][x+i]==0){
                break;
            }
            if(b1.board[y][x+i]==player){
                v[3]=1;
                break;
            }
        }
    }
    if(y<8 && x<8)
    if(v[4]==0 && b1.board[y+1][x+1]==difplayer(player)){
        for(int i=2;y+i<8 && x+i<8;i++){
            if(b1.board[y+i][x+i]==0){
                break;
            }
            if(b1.board[y+i][x+i]==player){
                v[4]=1;
                break;
            }
        }
    }
    if(y<8)
    if(v[5]==0 && b1.board[y+1][x]==difplayer(player)){
        for(int i=2;y+i<8;i++){
            if(b1.board[y+i][x]==0){
                break;
            }
            if(b1.board[y+i][x]==player){
                v[5]=1;
                break;
            }
        }
    }
    if(y<8 && x>0)
    if(v[6]==0 && b1.board[y+1][x-1]==difplayer(player)){
        for(int i=2;y+i<8 && x-i>0;i++){
            if(b1.board[y+i][x-i]==0){
                break;
            }
            if(b1.board[y+i][x-i]==player){
                v[6]=1;
                break;
            }
        }
    }
    if(x>0)
    if(v[7]==0 && b1.board[y][x-1]==difplayer(player)){
        for(int i=2;x-i>0;i++){
            if(b1.board[y][x-i]==0){
                break;
            }
            if(b1.board[y][x-i]==player){
                v[7]=1;
                break;
            }
        }
    }
    return v;
}

bool bool_move_possibility(short x, short y,short player){ //Можно ли сделать ход в данную клетку
    vector<bool> v=vec_move_possibility(x,y,player);
    for(auto i:v){
        if(i==true)
            return true;
    }
    return false;
}

vector<coord> move_variants(short player){ //Варианты хода из заданного положения
    vector<coord> v;
    for(short i=1;i<9;i++){
        for(short k=1;k<9;k++){
            if(bool_move_possibility(i,k,player)==true){
                v.push_back({i,k});
            }
        }
    }
    return v;
}

///Задания

void task1(){ //Задание 1
    b1.input();
    int s=0;
    for(int i=1;i<9;i++){
        for(int k=1;k<9;k++){
            if(b1.board[i][k]!=0){
                s++;
            }
        }
    }
    cout<<s-4;
}

void task2(){ //Задание 2
    b1.input();
    for(auto i:b1.wincheck_3()){
        cout<<i<<" ";
    }
}

void task3(){ //Задание 3
    short player;
    cin>>player;
    b1.input();
    /*vector<short> v;
    b1.board_input();
    for(int i=1;i<9;i++){
        for(int k=1;k<9;k++){
            if(b1.board[i][k]!=0){
                v.push_back();
            }
        }
    }*/
}

void task5(){ //Задание 5
    b1.input();
    short player;
    cin>>player;
    vector<coord> v=move_variants(difplayer(player));
    cout<<difplayer(player)<<endl<<v.size()<<endl;
    for(auto i:v){
        cout<<ch_s(i)<<" ";
    }
}

void task_switch(short task_number){ //Выбор заданий
    switch(task_number){
    case 1: //+
        task1();
        break;
    case 2: //+
        task2();
        break;
    case 3:
        task3();
        break;
    case 5: //+
        task5();
        break;
    default:
        cout<<"Not yet";
        break;
    }
}

int main()
{
    short task_number,player;
    b1.start();
    b2.start();
    cout<<"Task number: ";
    cin>>task_number;
    task_switch(task_number);
    b1.input();
    b1.print();
    /*for(auto i:vec_move_possibility(8,8,1)){
        cout<<i<<" ";
    }*/
}
